# Docs for the Azure Web Apps Deploy action: https://github.com/azure/functions-action
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Rain Hound services to Integration

on:
  push:
    branches:
      - integration
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './RainHound.Alerts' # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '7.0.x' # set this to the dotnet version to use

jobs:
  api-docker-build-push-acr:
    name: 'Docker Build and Push API to ACR'
    runs-on: ubuntu-latest
    environment: Integration
  
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
  
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
  
    - name: 'Docker Login'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
 
    - name: Build the frontend image and push it to ACR
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: rainhoundgscontainerregistryinte.azurecr.io/rainhound-weatherapi:latest
        file: ./RainHound.WeatherApi/Dockerfile

  build-and-deploy-alerts-function-app:
    name: 'Build and Deploy Alerts Function App'
    runs-on: windows-latest
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4

      - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 'Resolve Project Dependencies Using Dotnet'
        shell: pwsh
        run: |
          pushd '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          dotnet build --configuration Release --output ./output
          popd
      - name: 'Run Azure Functions Action'
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: 'rainhound-gs-alerts-inte'
          slot-name: 'Production'
          package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_86E6ED96A8FE4996983517F3131A70B5 }}

  build-client:
    runs-on: windows-latest
    name: 'Build Client App'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: npm install, build, and test
        run: |
          cd ./RainHound.Client
          npm install
          npm run build --if-present
        working-directory: .

      - name: Zip artifact for deployment
        run: zip release.zip ./RainHound.Client/* -r

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: node-app
          path: release.zip
  

  deploy-client:
    runs-on: ubuntu-latest
    name: 'Deploy Client App'
    needs: build-client
    environment:
      name: 'integration'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: Delete zip artifact
        run: rm release.zip

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v2
        id: deploy-to-webapp
        with:
          app-name: 'rainhound-gs-client-inte'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_E14719C4014C4D469F4721DE2C8947BF }}
          package: ./dist/client

